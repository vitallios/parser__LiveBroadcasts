import requests
import json
import re
from bs4 import BeautifulSoup
from datetime import datetime, timedelta
from concurrent.futures import ThreadPoolExecutor
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
import logging
from typing import Optional, Dict, List, Tuple
import ssl

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('parser.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class SportStreamParser:
    def __init__(self):
        self.session = self._configure_session()
        self.streams = []
        self.today = datetime.now().date()
        self.tomorrow = (datetime.now() + timedelta(days=1)).date()
        self.base_url = "https://srrb.ru/category/translyacii-sportivnyx-sobytij"
        
        # –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏ —ç–º–æ–¥–∑–∏
        self.categories = {
            "—Ö–æ–∫–∫–µ–π": {
                "keywords": ["–í–•–õ", "–•–ö", "–ú–•–õ", "–ö–•–õ", "–ñ–•–õ", "—Ö–æ–∫–∫–µ–π", "–ù–•–õ"],
                "emoji": "üèí"
            },
            "—Ñ—É—Ç–±–æ–ª": {
                "keywords": ["–§—É—Ç–±–æ–ª", "–õ–∏–≥–∞ —á–µ–º–ø–∏–æ–Ω–æ–≤", "–ü—Ä–µ–º—å–µ—Ä-–ª–∏–≥–∞", "–ß–µ–º–ø–∏–æ–Ω–∞—Ç –º–∏—Ä–∞"],
                "emoji": "‚öΩ"
            },
            "—Ç–µ–Ω–Ω–∏—Å": {
                "keywords": ["–¢–µ–Ω–Ω–∏—Å", "ATP", "WTA", "US Open", "–†–æ–ª–∞–Ω –ì–∞—Ä—Ä–æ—Å"],
                "emoji": "üéæ"
            },
            "–±–∞—Å–∫–µ—Ç–±–æ–ª": {
                "keywords": ["–ë–∞—Å–∫–µ—Ç–±–æ–ª", "–ù–ë–ê", "–ï–≤—Ä–æ–ª–∏–≥–∞"],
                "emoji": "üèÄ"
            },
            "–í–µ–ª–æ—Å–ø–æ—Ä—Ç": {
                "keywords": ["–í–µ–ª–æ—Å–ø–æ—Ä—Ç"],
                "emoji": "üö¥‚Äç‚ôÄÔ∏è"
            },
            "–¥—Ä—É–≥–æ–µ": {
                "keywords": [],
                "emoji": "üèü"
            }
        }

    def _configure_session(self) -> requests.Session:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç HTTP-—Å–µ—Å—Å–∏—é —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π SSL"""
        session = requests.Session()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        retry = Retry(
            total=3,
            backoff_factor=1,
            status_forcelist=[500, 502, 503, 504, 429]
        )
        adapter = HTTPAdapter(max_retries=retry)
        session.mount('http://', adapter)
        session.mount('https://', adapter)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7'
        })
        
        # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL —Ç–æ–ª—å–∫–æ –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –¥–æ–º–µ–Ω–∞
        original_send = session.send
        
        def custom_send(request, **kwargs):
            if "srrb.ru" in request.url:
                kwargs['verify'] = False
            return original_send(request, **kwargs)
        
        session.send = custom_send
        
        return session

    def _parse_date(self, text: str) -> Optional[datetime.date]:
        """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
        # –§–æ—Ä–º–∞—Ç DD.MM.YYYY
        if match := re.search(r'(\d{2})\.(\d{2})\.(\d{4})', text):
            day, month, year = map(int, match.groups())
            return datetime(year, month, day).date()
        
        # –§–æ—Ä–º–∞—Ç "1 —è–Ω–≤–∞—Ä—è 2023"
        months = {
            '—è–Ω–≤–∞—Ä': '01', '—Ñ–µ–≤—Ä–∞–ª': '02', '–º–∞—Ä—Ç': '03',
            '–∞–ø—Ä–µ–ª': '04', '–º–∞—è': '05', '–∏—é–Ω': '06',
            '–∏—é–ª': '07', '–∞–≤–≥—É—Å—Ç': '08', '—Å–µ–Ω—Ç—è–±—Ä': '09',
            '–æ–∫—Ç—è–±—Ä': '10', '–Ω–æ—è–±—Ä': '11', '–¥–µ–∫–∞–±—Ä': '12'
        }
        
        for month_ru, month_num in months.items():
            pattern = rf'(\d{{1,2}})\s*{month_ru}[–∞-—è]*\s*(\d{{4}})'
            if match := re.search(pattern, text, re.IGNORECASE):
                day, year = map(int, match.groups())
                return datetime(year, int(month_num), day).date()
        
        return None

    def _extract_stream_info(self, url: str) -> Tuple[Optional[str], Optional[str]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –∏ iframe —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏"""
        try:
            response = self.session.get(url, timeout=15)
            response.raise_for_status()
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # –ü–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
            time_patterns = [
                r'–Ω–∞—á–∞–ª–æ\s*–≤\s*(\d{1,2}:\d{2})',
                r'–≤\s*(\d{1,2}:\d{2})\s*–º—Å–∫',
                r'—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è\s*—Å\s*(\d{1,2}:\d{2})'
            ]
            
            time_text = None
            for p in soup.find_all('p'):
                text = p.get_text().lower()
                for pattern in time_patterns:
                    if match := re.search(pattern, text):
                        time_text = match.group(1)
                        break
                if time_text:
                    break
            
            # –ü–æ–∏—Å–∫ iframe —Å —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–µ–π
            iframe = soup.find('iframe', {'src': True})
            iframe_html = str(iframe) if iframe else None
            
            return time_text, iframe_html
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {url}: {str(e)}")
            return None, None

    def _process_event(self, event_element) -> Optional[Dict]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ"""
        try:
            link = event_element.find('a', href=True)
            if not link:
                return None
                
            title = link.get_text(strip=True)
            event_date = self._parse_date(title)
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ (—Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞)
            if not event_date or event_date not in (self.today, self.tomorrow):
                return None
                
            time_text, iframe = self._extract_stream_info(link['href'])
            if not time_text or not iframe:
                return None
                
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)
            category = "–¥—Ä—É–≥–æ–µ"
            for cat_name, cat_data in self.categories.items():
                if any(kw.lower() in title.lower() for kw in cat_data['keywords']):
                    category = cat_name
                    break
                    
            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = event_element.find('img', src=True)
            
            return {
                "category": category,
                "name": title,
                "link": iframe,
                "data": event_date.strftime("%Y.%m.%d"),
                "time": time_text,
                "img": img['src'] if img else None,
                "premium": "",
                "active": 0
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {str(e)}")
            return None

    def generate_telegram_post(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è Telegram-–ø–æ—Å—Ç–∞"""
        if not self.streams:
            return "üì∫ –ù–∞ —Å–µ–≥–æ–¥–Ω—è —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        grouped = {}
        for stream in self.streams:
            if stream['category'] not in grouped:
                grouped[stream['category']] = []
            grouped[stream['category']].append(stream)
            
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        for category in grouped.values():
            category.sort(key=lambda x: x['time'])
            
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
        lines = [
            f"üì∫ –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –Ω–∞ {self.today.strftime('%d.%m.%Y')}",
            ""
        ]
        
        for category, streams in grouped.items():
            cat_data = self.categories.get(category, self.categories['–¥—Ä—É–≥–æ–µ'])
            lines.append(f"{cat_data['emoji']} {category.upper()}")
            
            for stream in streams:
                lines.append(f"üïí {stream['time']} - {stream['name']}")
                
            lines.append("")
            
        lines.extend([
            "üì∫ @Live_Strim_bot",
            "",
            "üìå –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–∞—Ç—á–∏!",
            "#—Å–ø–æ—Ä—Ç #—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ #—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π–∫–∞–ª–µ–Ω–¥–∞—Ä—å #—Å–µ–≥–æ–¥–Ω—è #—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏—Å–ø–æ—Ä—Ç–∞ #–ø—Ä—è–º—ã–µ—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ #—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ #—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏"
        ])

        
        return "\n".join(lines)

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞"""
        logger.info(f"–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –Ω–∞ {self.today.strftime('%d.%m.%Y')}")
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            response = self.session.get(self.base_url, timeout=15)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.text, 'html.parser')
            events = soup.find_all('article', class_='post')
            
            if not events:
                logger.warning("–°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
                
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            # –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            with ThreadPoolExecutor(max_workers=4) as executor:
                results = list(executor.map(self._process_event, events))
                self.streams = [r for r in results if r]
                
            if self.streams:
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                with open('strimeList.json', 'w', encoding='utf-8') as f:
                    json.dump(self.streams, f, ensure_ascii=False, indent=2)
                    
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞
                post = self.generate_telegram_post()
                with open('telegram_post.txt', 'w', encoding='utf-8') as f:
                    f.write(post)
                    
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(self.streams)} —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π")
                print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç:\n")
                print(post)
            else:
                logger.info("–ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π")
                
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

if __name__ == '__main__':
    parser = SportStreamParser()
    parser.run()